<template>
    <div class='doc-view' id='root-view'>
        <header id="fixed-top">分支限界法</header>
        <h1 id='fixed-sfsx'>
            算法思想
        </h1>
        <p>
            对比回溯法就很容易思考，用广度优先的办法，不断扩大当前节点的孩子为当前节点，主要是求解一个最优解，算法相比回溯法要简单些。
        </p>
        <h1 id='fixed-zzwt'>
            装载问题
        </h1>
        <p>
            有一批共有n个集装箱要装上两艘载重量分别为c<sub>1</sub>和c<sub>2</sub>的轮船，其中，集装箱i的重量为w<sub>i</sub>，且 (w<sub>1</sub> +
            w<sub>2</sub> +...+ w<sub>n</sub>) &lt;= c<sub>1</sub> + c<sub>2</sub>
            。确定是否有一个合理的装载方案可将这n个集装箱装上这两艘轮船？如果有，找出一种装载方案。
        </p>
        <p>
            我们先尽力的把第一艘轮船装满，越多越好，余下的如果看看第二艘船是否可以装下即可。
        </p>
        <p>
            如何求解第一艘的载重？
        </p>
        <p>
            类似的，每个物品标记0或1表示不装入和装入，也就是会形成一棵二叉树，当然也可以通过回溯法遍历，而这里，我们换个遍历方式。
        </p>
        <p>
            我们可以维护一个数组nodeArray，开始的时候只有一个根结点，然后，按照下面这个方法进行遍历：
        </p>
        <ul>
            <li>
                （1）依次取出所有的结点，判断下一层对应的货物是否可以装入，如果可以，在数组nodeArray中放回选择了当前货物和没选择当前货物两个结点，否则只放入没选择当前货物的结点。
            </li>
            <li>
                （2）按照上面的方式，逐层深入，直到到达叶子结点时停止。
            </li>
            <li>
                （3）此时，数组nodeArray中都是可行的叶子结点，选择最佳的即可。
            </li>
        </ul>
        <p>
            完整的代码请
            <a target="_blank" class='link'
                href="https://github.com/agile-contrib/algorithm-practice/tree/master/4.【分支限界法】装载问题">
                点击此处
            </a>
            进行查看。
        </p>
    </div>
</template>
