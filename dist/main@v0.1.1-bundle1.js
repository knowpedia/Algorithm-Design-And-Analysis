(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{20:function(a,p,e){var i=e(21);"string"==typeof i&&(i=[[a.i,i,""]]),i.locals&&(a.exports=i.locals);(0,e(1).default)("data-quickpaper-7e51f643",i,!0)},21:function(a,p,e){(a.exports=e(0)(!1)).push([a.i,"",""])},24:function(a,p,e){"use strict";e.r(p);var i={};e(20);i.render=function(a){return a("div",{quickpaper:"","data-quickpaper-7e51f643":""},[a("div",{class:"doc-view",id:"root-view","data-quickpaper-7e51f643":""},[a("header",{id:"fixed-top","data-quickpaper-7e51f643":""},["算法引论"]),a("h1",{id:"fixed-sfycx","data-quickpaper-7e51f643":""},["算法与程序"]),a("p",{"data-quickpaper-7e51f643":""},["通俗地讲，",a("span",{class:"important","data-quickpaper-7e51f643":""},["算法"]),"是指解决问题的方法或过程。严格地讲，算法是满足下述性质的指令序列："]),a("ul",{"data-quickpaper-7e51f643":""},[a("li",{"data-quickpaper-7e51f643":""},["（1）输入：有零个或多个外部量作为算法的输入。"]),a("li",{"data-quickpaper-7e51f643":""},["（2）输出：算法产生至少一个量作为输出。"]),a("li",{"data-quickpaper-7e51f643":""},["（3）确定性：组成算法的每条指令是清晰度、无歧义的。"]),a("li",{"data-quickpaper-7e51f643":""},["（4）有限性：算法中每条指令的执行次数有限，执行每条指令的时间也有限。"])]),a("p",{"data-quickpaper-7e51f643":""},["而",a("span",{class:"important","data-quickpaper-7e51f643":""},["程序"]),"与算法不同，↵            程序是算法用某种程序设计语言的具体实现。"]),a("p",{"data-quickpaper-7e51f643":""},["程序可以不满足算法的性质（4）即有限性，例如操作系统，它是在无限循环中执行的程序。然而，可把操作系统的各种任务看成一些单独的问题，每一个问题由操作系统中的一个子程序通过特定的算法实现，该子程序得到输出结果后便停止。"]),a("h1",{id:"fixed-bdsfdcxjz","data-quickpaper-7e51f643":""},["表达算法的抽象机制"]),a("p",{"data-quickpaper-7e51f643":""},["对于一个明确的数学问题，设计它的算法，总是先选用该问题的一个数据模型。"]),a("p",{"data-quickpaper-7e51f643":""},["接着弄清楚该问题数据模型在已知条件下的初始状态和要求的结果状态，以及这两个状态之间的隐含关系。"]),a("p",{"data-quickpaper-7e51f643":""},["然后探索从数据模型的已知初始状态到达要求的结果状态所需的运算步骤（这些运算步骤就是求解该问题的算法）。"]),a("h1",{id:"fixed-sffzxfx","data-quickpaper-7e51f643":""},["算法复杂性分析"]),a("p",{"data-quickpaper-7e51f643":""},["算法复杂性的高低体现在运行该算法所需要的计算机资源的多少上，所需要的资源越多，该算法的复杂性越高，反之就越低。"]),a("p",{"data-quickpaper-7e51f643":""},["而计算机中，最重要的资源就是时间和空间（即存储器），因此，算法的复杂性有",a("span",{class:"important","data-quickpaper-7e51f643":""},["时间复杂性"]),"和",a("span",{class:"important","data-quickpaper-7e51f643":""},["空间复杂性"]),"之分。↵            对于任意一个给定的问题，设计出复杂性尽可能低的算法是在设计算法时追求的重要目标。"]),a("p",{"data-quickpaper-7e51f643":""},["但是，在有些情况下，复杂性的追求也不完全是越低越好，比如：可读性、可扩展等也很重要，需要结合实际情况选择，切莫陷入“虚无的理想主义者”陷阱中去。"])])])};p.default=i}}]);